#!/usr/bin/env python3
"""
Database Configuration Setup Tool
Interactive tool to help configure your office database schema.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from column_config import ColumnConfigManager

def setup_office_database():
    """Interactive setup for office database configuration."""
    print("üè¢ Office Database Configuration Setup")
    print("=" * 50)
    
    config_manager = ColumnConfigManager()
    
    # Get basic information
    print("\n1. Basic Information")
    print("-" * 20)
    
    while True:
        table_name = input("Enter table name (or 'done' to finish): ").strip()
        if table_name.lower() == 'done':
            break
        
        print(f"\nConfiguring table: {table_name}")
        
        # Get columns
        print("Enter column names (comma-separated):")
        columns_input = input("Columns: ").strip()
        columns = [col.strip() for col in columns_input.split(',') if col.strip()]
        
        if not columns:
            print("‚ùå No columns entered. Skipping this table.")
            continue
        
        # Auto-detect or manually configure
        print("\nChoose configuration method:")
        print("1. Auto-detect column patterns")
        print("2. Manual configuration")
        choice = input("Choice (1/2): ").strip()
        
        if choice == '1':
            config_manager.auto_detect_columns(table_name, columns)
        else:
            # Manual configuration
            id_col = input(f"ID column (from {columns}): ").strip()
            name_col = input(f"Name column (from {columns}): ").strip()
            email_col = input(f"Email column (from {columns}, optional): ").strip()
            
            config_manager.configure_office_table(
                table_name=table_name,
                columns=columns,
                id_column=id_col if id_col else None,
                name_column=name_col if name_col else None,
                email_column=email_col if email_col else None
            )
        
        # Show configuration
        print(f"\nüìã Configuration for '{table_name}':")
        print(config_manager.describe_table(table_name))
        
        confirm = input("\nIs this configuration correct? (y/n): ").strip().lower()
        if confirm != 'y':
            print("Configuration discarded.")
            del config_manager.mappings[table_name.lower()]
    
    # Generate configuration file
    generate_config_file(config_manager)
    
    return config_manager

def generate_config_file(config_manager):
    """Generate a Python configuration file."""
    print("\n" + "=" * 50)
    print("üîß Generating Configuration File")
    print("=" * 50)
    
    config_content = '''# Auto-generated Office Database Configuration
# Generated by setup_database_config.py

OFFICE_DATABASE_MAPPINGS = {
'''
    
    for table_name, config in config_manager.mappings.items():
        config_content += f"    '{table_name}': {{\n"
        config_content += f"        'columns': {config['columns']},\n"
        config_content += f"        'name_fields': {config['name_fields']},\n"
        config_content += f"        'mappings': {config['mappings']}\n"
        config_content += f"    }},\n"
    
    config_content += "}\n"
    
    # Write to file
    with open('office_database_config.py', 'w') as f:
        f.write(config_content)
    
    print("‚úÖ Configuration saved to 'office_database_config.py'")
    print("You can now edit this file directly for further customization.")

def quick_setup_examples():
    """Show some quick setup examples for common office scenarios."""
    print("\nüöÄ Quick Setup Examples")
    print("=" * 30)
    
    examples = {
        "HR Database": {
            "employees": {
                "columns": ["emp_id", "full_name", "department", "email", "hire_date", "salary"],
                "id_col": "emp_id",
                "name_col": "full_name",
                "email_col": "email"
            },
            "departments": {
                "columns": ["dept_id", "dept_name", "manager_id", "budget"],
                "id_col": "dept_id", 
                "name_col": "dept_name"
            }
        },
        "Project Management": {
            "projects": {
                "columns": ["project_id", "project_name", "start_date", "end_date", "status"],
                "id_col": "project_id",
                "name_col": "project_name"
            },
            "tasks": {
                "columns": ["task_id", "task_name", "project_id", "assignee", "due_date"],
                "id_col": "task_id",
                "name_col": "task_name"
            }
        }
    }
    
    for scenario, tables in examples.items():
        print(f"\n{scenario}:")
        for table, config in tables.items():
            print(f"  {table}: {config['columns']}")
    
    print("\nWould you like to use one of these examples as a starting point?")
    choice = input("Enter scenario name (or 'custom' for manual setup): ").strip()
    
    if choice in examples:
        config_manager = ColumnConfigManager()
        for table, config in examples[choice].items():
            config_manager.configure_office_table(
                table_name=table,
                columns=config["columns"],
                id_column=config.get("id_col"),
                name_column=config.get("name_col"),
                email_column=config.get("email_col")
            )
        
        generate_config_file(config_manager)
        return config_manager
    
    return None

def main():
    """Main setup function."""
    print("Welcome to the Database Configuration Setup Tool!")
    print("This tool will help you configure your office database schema.")
    
    # Check if existing configuration exists
    if os.path.exists('office_database_config.py'):
        print("\n‚ö†Ô∏è  Existing office_database_config.py found!")
        overwrite = input("Do you want to overwrite it? (y/n): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    print("\nChoose setup method:")
    print("1. Quick setup with examples")
    print("2. Custom interactive setup")
    print("3. View current configuration")
    
    choice = input("Choice (1/2/3): ").strip()
    
    if choice == '1':
        config_manager = quick_setup_examples()
        if not config_manager:
            config_manager = setup_office_database()
    elif choice == '2':
        config_manager = setup_office_database()
    elif choice == '3':
        config_manager = ColumnConfigManager()
        print("\nCurrent Configuration:")
        print("=" * 30)
        for table in config_manager.list_available_tables():
            print(config_manager.describe_table(table))
            print("-" * 30)
        return
    
    print("\nüéâ Configuration setup complete!")
    print("Your database configuration is ready to use.")
    print("\nNext steps:")
    print("1. Edit 'office_database_config.py' if needed")
    print("2. Restart your application to use the new configuration")

if __name__ == "__main__":
    main()
